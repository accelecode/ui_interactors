#!/usr/bin/env ruby
require 'erb'
require 'fileutils'
require 'thor'
require_relative File.join('..', 'lib', 'ui_interactors')

module UiInteractors
  class CLI < Thor

    desc 'gen [PATH]', 'Generate a new test suite'
    long_desc <<~DESC
      Generate a new test suite

      [PATH] is the relative or absolute path where the test suite should be generated.
    DESC
    option :app_url
    def gen(path)
      new_project_path = File.expand_path(path)
      puts "Using path: #{new_project_path}"

      if File.exists?(new_project_path)
        puts 'Path already exists, no action taken'
        return
      else
        create_new_project_path(new_project_path)
      end

      generate_files(new_project_path)
      execute_bundle_install(new_project_path)
    end

    private

    def app_url_option
      options.fetch(:app_url, 'http://localhost:8000')
    end

    def create_new_project_path(new_project_path)
      FileUtils.mkdir_p(new_project_path)
      puts "Created path: #{new_project_path}"
    end

    def current_path
      File.expand_path(File.dirname(__FILE__))
    end

    def templates_path
      File.expand_path(File.join(current_path, '..', 'template'))
    end

    def generate_files(new_project_path)
      generate_project_root_files(new_project_path)
      generate_base_test_files(new_project_path)
    end

    def generate_project_root_files(new_project_path)
      generate_template(new_project_path, '.ruby-version.erb', '.ruby-version')
      generate_template(new_project_path, 'Gemfile.rb.erb', 'Gemfile', version: UiInteractors::VERSION)
      generate_template(new_project_path, 'Rakefile.rb.erb', 'Rakefile')
    end

    def generate_base_test_files(new_project_path)

      'tests'.tap do |relative_path|
        create_output_path(new_project_path, relative_path)
        generate_template(new_project_path, File.join(relative_path, 'base_test.rb.erb'), File.join(relative_path, 'base_test.rb'), app_url: app_url_option)
        generate_template(new_project_path, File.join(relative_path, 'driver_provider.rb.erb'), File.join(relative_path, 'driver_provider.rb'))
        generate_template(new_project_path, File.join(relative_path, 'ui_steps.rb.erb'), File.join(relative_path, 'ui_steps.rb'))
      end

      File.join('tests', 'example').tap do |relative_path|
        create_output_path(new_project_path, relative_path)
        generate_template(new_project_path, File.join(relative_path, 'test_example.rb.erb'), File.join(relative_path, 'test_example.rb.erb'))
      end

    end

    def generate_template(new_project_path, template_file_relative_path, output_file_relative_path, template_locals={})
      template = File.read(File.join(templates_path, template_file_relative_path))
      output_contents = ERB.new(template).result_with_hash(template_locals)
      output_path = File.join(new_project_path, output_file_relative_path)
      File.write(output_path, output_contents)
      puts "Generated file: #{output_file_relative_path}"
    end

    def create_output_path(base_path, new_relative_path)
      new_dir_path = File.join(base_path, new_relative_path)
      FileUtils.mkdir_p(new_dir_path)
      puts "Created path: #{new_relative_path}"
    end

    def execute_bundle_install(new_project_path)
      if `which bundle` == ''
        puts "WARNING: Could not find `bundle` in path"
      else
        puts "Running bundle install in #{new_project_path}:"
        output = `cd #{new_project_path} && bundle install`
        puts output
      end
    end
  end
end

UiInteractors::CLI.start(ARGV)
