require_relative '../base_test'

# TODO: remove this file and code. It exists solely as a reference to create your first test
# The test class below includes a single test which illustrates how you might automate the sign in process for a typical
# web application. Note that #setup is navigating to the home url. This should generally redirect a user to the sign in
# page. We confirm this is the case in the test by ensuring the `sign-in` view is visible.

class TestExample < BaseTest

  def setup
    super
    ui_steps.navigate_to_home
  end

  def test_sign_in_success
    # TODO: add code to create user, use email and password for new user
    email = 'email@example.org'
    password = 'password123'
    
    view('sign-in').tap do |sign_in|
      sign_in.is_visible!
      sign_in.text_field('email').enter_text(email)
      sign_in.text_field('password').enter_text(password)
      sign_in.action('submit').activate
      sign_in.is_not_visible!
    end

    view('dashboard').is_visible!
  end

  def test_sign_in_failure_user_does_not_exist
    email = 'does_not_exist@example.org'
    password = 'password123'
    
    view('sign-in').tap do |sign_in|
      sign_in.is_visible!
      sign_in.text_field('email').enter_text(email)
      sign_in.text_field('password').enter_text(password)
      # no errors before submitting
      sign_in.list('errors').is_not_visible!
      sign_in.action('submit').activate
      # should see error after submitting
      sign_in.list('errors').row(texts: {message: 'Sign in failed.'}).is_visible!
      # should still be on sign in page
      sign_in.is_visible!
    end
  end

end
